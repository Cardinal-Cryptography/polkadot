// Copyright (C) Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_treasury`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-e8ezs4ez-project-163-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=polkadot-dev
// --steps=50
// --repeat=20
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --pallet=pallet_treasury
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/polkadot/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_treasury`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
	/// Storage: Treasury ProposalCount (r:1 w:1)
	/// Proof Skipped: Treasury ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Treasury Approvals (r:1 w:1)
	/// Proof Skipped: Treasury Approvals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Treasury Proposals (r:0 w:1)
	/// Proof Skipped: Treasury Proposals (max_values: None, max_size: None, mode: Measured)
	fn spend_local() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1561`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(78_000_000, 1561)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Treasury ProposalCount (r:1 w:1)
	/// Proof Skipped: Treasury ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Treasury Proposals (r:0 w:1)
	/// Proof Skipped: Treasury Proposals (max_values: None, max_size: None, mode: Measured)
	fn propose_spend() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `177`
		//  Estimated: `1662`
		// Minimum execution time: 121_000_000 picoseconds.
		Weight::from_parts(166_000_000, 1662)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Treasury Proposals (r:1 w:1)
	/// Proof Skipped: Treasury Proposals (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn reject_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `3800`
		// Minimum execution time: 159_000_000 picoseconds.
		Weight::from_parts(164_000_000, 3800)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Treasury Proposals (r:1 w:0)
	/// Proof Skipped: Treasury Proposals (max_values: None, max_size: None, mode: Measured)
	/// Storage: Treasury Approvals (r:1 w:1)
	/// Proof Skipped: Treasury Approvals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `p` is `[0, 99]`.
	fn approve_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504 + p * (8 ±0)`
		//  Estimated: `3922 + p * (9 ±0)`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(94_256_431, 3922)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 9).saturating_mul(p.into()))
	}
	/// Storage: Treasury Approvals (r:1 w:1)
	/// Proof Skipped: Treasury Approvals (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_approval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `1646`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(43_000_000, 1646)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Treasury Deactivated (r:1 w:1)
	/// Proof Skipped: Treasury Deactivated (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Treasury Approvals (r:1 w:1)
	/// Proof Skipped: Treasury Approvals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Treasury Proposals (r:100 w:100)
	/// Proof Skipped: Treasury Proposals (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:200 w:200)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Bounties BountyApprovals (r:1 w:1)
	/// Proof: Bounties BountyApprovals (max_values: Some(1), max_size: Some(402), added: 897, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 100]`.
	fn on_initialize_proposals(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `421 + p * (251 ±0)`
		//  Estimated: `1894 + p * (5206 ±0)`
		// Minimum execution time: 167_000_000 picoseconds.
		Weight::from_parts(451_684_629, 1894)
			// Standard Error: 1_698_594
			.saturating_add(Weight::from_parts(164_282_216, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 5206).saturating_mul(p.into()))
	}
	/// Storage: Treasury SpendCount (r:1 w:1)
	/// Proof Skipped: Treasury SpendCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Treasury Spends (r:0 w:1)
	/// Proof Skipped: Treasury Spends (max_values: None, max_size: None, mode: Measured)
	fn spend() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1561`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(57_000_000, 1561)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Treasury Spends (r:1 w:1)
	/// Proof Skipped: Treasury Spends (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `705`
		//  Estimated: `6208`
		// Minimum execution time: 268_000_000 picoseconds.
		Weight::from_parts(360_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Treasury Spends (r:1 w:1)
	/// Proof Skipped: Treasury Spends (max_values: None, max_size: None, mode: Measured)
	fn check_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `194`
		//  Estimated: `3659`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(65_000_000, 3659)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
